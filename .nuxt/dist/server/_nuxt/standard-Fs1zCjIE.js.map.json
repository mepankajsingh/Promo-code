{"file":"standard-Fs1zCjIE.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HiB,sBAAkB;AAC7B,UAAA,QAAQ,IAAI,EAAE;AACd,UAAA,YAAY,IAAI,EAAE;AAClB,UAAA,gBAAgB,IAAI,EAAE;AACtB,UAAA,UAAU,IAAI,KAAK;AACnB,UAAA,EAAE,EAAE,IAAI,QAAQ;AAChB,UAAA,iBAAiB,IAAI,EAAE;AAC7B,UAAM,eAAe,IAAI;AAAA,MACvB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,MAAM;AAAA,IAAA,CACP;AAWD,UAAM,WAAW;AAAA,MACf,OAAO,CAAC;AAAA,MACR,UAAU,CAAC;AAAA,MACX,SAAS,CAAA;AAAA,IACX;AAEQ,YAAA;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,QACJ;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,MACX;AAAA,IACF,CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/standard.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-white\">\n    <div class=\"max-w-2xl mx-auto px-4 py-12\">\n      <div class=\"text-center mb-8\">\n        <h1 class=\"text-3xl font-bold text-gray-900 mb-2\">{{ $t('standard.title') }}</h1>\n        <p class=\"text-gray-600 mb-4\">\n          {{ $t('standard.subtitle') }}\n        </p>\n        <div class=\"inline-flex items-center bg-blue-50 px-4 py-2 rounded-lg\">\n          <span class=\"text-gray-600\">$14{{ $t('common.pricing.perUser') }}</span>\n        </div>\n      </div>\n      \n      <div class=\"bg-gray-50 p-6 mb-6\">\n        <form @submit.prevent=\"getPromoCode\" class=\"space-y-6\">\n          <RegionSelector v-model=\"selectedRegion\" />\n\n          <div>\n            <label class=\"block text-sm font-medium text-gray-700 mb-1\">{{ $t('common.businessEmail') }}</label>\n            <input\n              v-model=\"email\"\n              type=\"email\"\n              class=\"w-full px-3 py-2 border border-gray-300 text-sm\"\n              :placeholder=\"$t('common.emailAddresses.placeholder', { email: 'your@business.com' })\"\n            >\n          </div>\n\n          <div v-if=\"loading\" class=\"bg-white border border-gray-200 p-4 text-center\">\n            <SkeletonLoader type=\"text\" class=\"mb-4\" />\n            <div class=\"h-12 bg-gray-200 rounded mb-4\"></div>\n            <SkeletonLoader type=\"text\" />\n          </div>\n\n          <div v-else-if=\"promoCode\" class=\"bg-white border border-gray-200 p-4 text-center\">\n            <Notification\n              v-if=\"notification.show && notification.type === 'success'\"\n              :message=\"notification.message\"\n              :type=\"notification.type\"\n              class=\"mb-4\"\n            />\n            <h3 class=\"text-sm font-medium text-gray-700 mb-2\">{{ $t('common.promoCodeTitle') }}</h3>\n            <div \n              class=\"text-2xl font-mono bg-gray-50 p-3 border border-gray-100 mb-2 text-green-600 cursor-pointer hover:bg-gray-100 transition-colors\"\n              @click=\"copyToClipboard(promoCode)\"\n              title=\"Click to copy\"\n            >\n              {{ promoCode }}\n            </div>\n            <p class=\"text-sm text-gray-700\">\n              {{ $t('common.useCodeMessage') }}\n            </p>\n          </div>\n\n          <div v-if=\"loading && previousCodes.length > 0\" class=\"mt-4 bg-white border border-blue-200 p-4\">\n            <SkeletonLoader type=\"text\" class=\"mb-4\" />\n            <div class=\"space-y-3\">\n              <div v-for=\"i in previousCodes.length\" :key=\"i\" class=\"h-12 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n\n          <div v-else-if=\"previousCodes.length > 0\" class=\"mt-4 bg-white border border-blue-200 p-4\">\n            <h3 class=\"text-sm font-medium text-gray-700 mb-4 text-center\">Previously Claimed Codes</h3>\n            <div class=\"space-y-3\">\n              <div \n                v-for=\"code in previousCodes\" \n                :key=\"code\" \n                class=\"font-mono bg-gray-50 p-3 border border-gray-100 text-center text-green-600 cursor-pointer hover:bg-gray-100 transition-colors\"\n                @click=\"copyToClipboard(code)\"\n                title=\"Click to copy\"\n              >\n                {{ code }}\n              </div>\n            </div>\n          </div>\n\n          <Notification\n            v-if=\"notification.show && notification.type !== 'success'\"\n            :message=\"notification.message\"\n            :type=\"notification.type\"\n          />\n\n          <button\n            type=\"submit\"\n            class=\"w-full bg-blue-600 text-white px-4 py-2 text-sm font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n            :disabled=\"loading || !selectedRegion\"\n          >\n            <span v-if=\"loading\">{{ $t('common.processing') }}</span>\n            <span v-else>{{ $t('common.getPromoCode') }}</span>\n          </button>\n           \n          <div class=\"text-sm text-gray-600 bg-yellow-50 border border-yellow-200 p-3 rounded-lg text-center\">\n            <svg class=\"h-5 w-5 text-yellow-600 inline-block mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a 9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            {{ $t('common.limitedAvailability') }}\n          </div>\n        </form>\n      </div>\n\n      <!-- Features Section -->\n      <div class=\"mt-12 space-y-8\">\n        <div class=\"bg-white border border-gray-200 p-6\">\n          <h2 class=\"text-xl font-semibold text-gray-900 mb-6\">{{ $t('standard.features.title') }}</h2>\n          <div class=\"space-y-4\">\n            <div v-for=\"(feature, key) in features\" :key=\"key\" class=\"flex items-start\">\n              <svg class=\"h-5 w-5 text-blue-600 mt-1 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <div>\n                <h3 class=\"text-sm font-medium text-gray-900\">{{ $t(`standard.features.${key}.title`) }}</h3>\n                <p class=\"text-sm text-gray-600\">{{ $t(`standard.features.${key}.description`) }}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <UpdatesFeed />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst supabase = useSupabaseClient()\nconst email = ref('')\nconst promoCode = ref('')\nconst previousCodes = ref([])\nconst loading = ref(false)\nconst { t } = useI18n()\nconst selectedRegion = ref('')\nconst notification = ref({\n  show: false,\n  message: '',\n  type: 'error'\n})\n\nasync function copyToClipboard(text) {\n  try {\n    await navigator.clipboard.writeText(text)\n    showNotification('Code copied to clipboard!', 'success')\n  } catch (err) {\n    showNotification('Failed to copy code', 'error')\n  }\n}\n\nconst features = {\n  email: {},\n  meetings: {},\n  storage: {}\n}\n\nuseHead({\n  title: 'Google Workspace Business Standard Promo Code - 10% Discount',\n  meta: [\n    {\n      name: 'description',\n      content: 'Get your exclusive 10% discount promo code for Google Workspace Business Standard plan.'\n    }\n  ]\n})\n\nfunction showNotification(message, type = 'error') {\n  notification.value = {\n    show: true,\n    message: type === 'success' ? t('common.successMessage') : message,\n    type\n  }\n  setTimeout(() => {\n    notification.value.show = false\n  }, 5000)\n}\n\nasync function getPromoCode() {\n  if (!selectedRegion.value) return\n  \n  loading.value = true\n  let claimedCodeId = null\n  notification.value.show = false\n  \n  try {\n    const userIp = await useUserIp()\n\n    // Get all previously claimed codes for this IP address\n    const { data: existingClaims, error: claimsError } = await supabase\n      .from('user_claims')\n      .select('promo_code_id')\n      .eq('ip_address', userIp)\n\n    if (claimsError) throw claimsError\n\n    if (existingClaims && existingClaims.length > 0) {\n      // Get all previously claimed codes\n      const { data: claimedCodes } = await supabase\n        .from('promo_codes')\n        .select('code')\n        .in('id', existingClaims.map(claim => claim.promo_code_id))\n\n      if (claimedCodes) {\n        previousCodes.value = claimedCodes.map(code => code.code)\n        \n        if (existingClaims.length >= 3) {\n          showNotification(\n            `You have already claimed the maximum of 3 promo codes: ${previousCodes.value.join(', ')}`,\n            'warning'\n          )\n          loading.value = false\n          return\n        }\n      }\n    }\n\n    // Get new unclaimed code\n    const { data: newCode, error: codeError } = await supabase\n      .from('promo_codes')\n      .select('id, code')\n      .match({\n        type: 'standard',\n        region: selectedRegion.value,\n        is_claimed: false\n      })\n      .filter('id', 'not.in', `(${existingClaims?.map(claim => claim.promo_code_id).join(',') || ''})`)\n      .limit(1)\n      .single()\n\n    if (codeError) throw codeError\n\n    if (newCode) {\n      claimedCodeId = newCode.id\n\n      // Mark code as claimed immediately\n      const { error: updateError } = await supabase\n        .from('promo_codes')\n        .update({ is_claimed: true })\n        .eq('id', newCode.id)\n\n      if (updateError) throw updateError\n\n      // Create claim record with IP\n      const { error: claimError } = await supabase\n        .from('user_claims')\n        .insert([\n          { \n            promo_code_id: newCode.id,\n            type: 'standard',\n            region: selectedRegion.value,\n            ip_address: userIp\n          }\n        ])\n\n      if (claimError) throw claimError\n\n      // Add new code to display\n      promoCode.value = newCode.code\n      previousCodes.value = [...previousCodes.value, newCode.code]\n\n      // Save email if provided (don't wait for this)\n      if (email.value) {\n        supabase.from('business_emails').insert([\n          { email: email.value }\n        ]).then()\n      }\n\n      showNotification('Successfully retrieved your promo code!', 'success')\n    } else {\n      throw new Error('No available promo codes')\n    }\n  } catch (error) {\n    console.error('Error:', error)\n    // If we failed after setting the code as claimed, try to revert it\n    if (claimedCodeId) {\n      await supabase\n        .from('promo_codes')\n        .update({ is_claimed: false })\n        .eq('id', claimedCodeId)\n    }\n    promoCode.value = ''\n    showNotification(error.message || 'Failed to get promo code. Please try again.')\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n"],"version":3}